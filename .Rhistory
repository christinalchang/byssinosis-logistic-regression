overall_avg
as.dataframe(aggregate(Year ~ Uni, data, mean))
as.dataframe(aggregate(Year ~ Uni, data, mean))$Uni
aggregate(Year ~ Uni, data, mean)$Uni
df$diff = df$Year - overall_avg
df$Year
as.data.frame(df)
as.data.frame.matrix(df)
as.numeric(df)
df["Year"]
df
df = aggregate(Year ~ Uni, data, mean)
df
df$Year
df$diff = df$Year - overall_avg
df
ggplot(data, aes(fill=Res, y=value, x=Uni)) +
geom_bar(position="dodge", stat="identity")
ggplot(data, aes(fill=Res, y=year, x=Uni)) +
geom_bar(position="dodge", stat="identity")
ggplot(data, aes(fill=Res, y=Year, x=Uni)) +
geom_bar(position="dodge", stat="identity")
ggplot(data, aes(fill=Res, Freq, x=Uni)) +
geom_bar(position="dodge", stat="identity")
table(data$Uni, data$Res)
barplot(table(data$Uni, data$Res))
barplot(table(data$Uni, data$Res), beside = TRUE)
barplot(table(data$Uni, data$Res), legend = rownames(counts),beside = TRUE)
ggplot(data, aes(x = Uni, fill = Res)) +
geom_bar(position="dodge", stat="identity")
ggplot(data, aes(x = Uni, fill = Res)) +
geom_bar(position="dodge")
ggplot(data, aes(x = Uni, fill = Res)) +
geom_bar(position="dodge") +
ggtitle("Number of Students by University and Residency") +
xlab("University") +
ylab("Count") +
labs(fill = "Residency")
ggplot(data, aes(x = Uni, fill = Res)) +
geom_bar(position="dodge") +
ggtitle("Number of Students by University and Residency") +
xlab("University") +
ylab("Count") +
labs(fill = "Residency")
ggplot(data, aes(x = Uni, y = Year, color = Uni)) +
geom_boxplot()
ggplot(data[,data$Uni == "Princeton", aes(x = Uni, y = Year, color = Uni)) +
geom_boxplot()
ggplot(data[,data$Uni == "Princeton"], aes(x = Uni, y = Year, color = Uni)) +
geom_boxplot()
data[,data$Uni == "Princeton"]
data[data$Uni == "Princeton",]
ggplot(data[data$Uni == "Princeton",], aes(x = Uni, y = Year, color = Uni)) +
geom_boxplot()
ggplot(data[data$Uni == "Princeton",], aes(x = Uni, y = Year)) +
geom_boxplot()
ggplot(data[data$Uni == "Princeton",], aes(x = Uni, y = Year)) +
geom_boxplot() +
ggtitle("Boxplot of Years to Graduate for Princeton") +
xlab("University")
ggplot(data[data$Uni == "Princeton",], aes(x = Uni, y = Year), color = Res) +
geom_boxplot() +
ggtitle("Boxplot of Years to Graduate for Princeton") +
xlab("University")
ggplot(data[data$Uni == "Princeton",], aes(x = Uni, y = Year, color = Res)) +
geom_boxplot() +
ggtitle("Boxplot of Years to Graduate for Princeton") +
xlab("University")
ggplot(data[data$Uni == "Princeton",],
aes(x = Uni, y = Year, color = Res)) +
geom_boxplot() +
ggtitle("Boxplot of Years to Graduate for Princeton") +
xlab("University") +
labs(fill = "Residency")
ggplot(data[data$Uni == "Princeton",],
aes(x = Uni, y = Year, color = Res)) +
geom_boxplot() +
ggtitle("Boxplot of Years to Graduate for Princeton") +
xlab("University") +
labs(fill = "Residency")
ggplot(data[data$Uni == "Princeton",],
aes(x = Uni, y = Year, color = Res)) +
geom_boxplot() +
ggtitle("Boxplot of Years to Graduate for Princeton") +
xlab("University") +
scale_fill_discrete(name = "Residency")
ggplot(data[data$Uni == "Princeton",],
aes(x = Uni, y = Year, fill = Res)) +
geom_boxplot() +
ggtitle("Boxplot of Years to Graduate for Princeton") +
xlab("University") +
scale_fill_discrete(name = "Residency")
aggregate(Year~Uni+Residency, data, mean)
aggregate(Year~Uni+Res, data, mean)
aggregate(Year~Uni+Res, data, mean)
print(1:10)
print(0:10)
knitr::opts_chunk$set(echo = FALSE, include = TRUE)
install.packages("ISwR")
install.packages("dplyr")
bcmort
data(bcmort)
# Import libraries.
library(ISwR)
data("bcmort")
bcmort
names(bcmort)
unique(bcmort$cohort)
mutate(bcmort, period = ifelse(
(bcmort$cohort == "Study gr.") || (bcmort$cohort == "Nat.ctr."),
'first', 'second'))
library(dplyr)
mutate(bcmort, period = ifelse(
(bcmort$cohort == "Study gr.") || (bcmort$cohort == "Nat.ctr."),
'first', 'second'))
mutate(bcmort, period = ifelse(
((bcmort$cohort == "Study gr.") || (bcmort$cohort == "Nat.ctr.")),
'first', 'second'))
mutate(bcmort, period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'))
tmp1 = mutate(bcmort, period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'))
tmp1
tmp = mutate(bcmort, period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'))
# Create the are column.
df = mutate(tmp, period = ifelse(
((tmp$cohort == "Study gr.") | (tmp$cohort == "Hist.ctr.")),
'C/F', 'National'))
df
tmp
tmp
names(tmp)
names(df)
tmp = mutate(bcmort, period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'))
# Create the are column.
df = mutate(tmp, period = ifelse(
((tmp$cohort == "Study gr.") | (tmp$cohort == "Hist.ctr.")),
'C/F', 'National'))
df
bcmort %>% mutate(bcmort, period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'))
tmp %>% mutate(bcmort, period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'))
tmp = mutate(bcmort,
period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'),
period = ifelse(
((tmp$cohort == "Study gr.") | (tmp$cohort == "Hist.ctr.")),
'C/F', 'National')
)
tmp
tmp = mutate(bcmort,
period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'),
area = ifelse(
((tmp$cohort == "Study gr.") | (tmp$cohort == "Hist.ctr.")),
'C/F', 'National')
)
tmp
# Create the period and area column.
df = mutate(bcmort,
period = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Nat.ctr.")),
'first', 'second'),
area = ifelse(
((bcmort$cohort == "Study gr.") | (bcmort$cohort == "Hist.ctr.")),
'C/F', 'National')
)
df.head()
head(df)
model = glm(bc.deaths ~ age + period + area,
family = "poisson", data = df)
summary(model)
model = glm(bc.deaths ~ (age + period + area)^2,
family = "poisson", data = df)
summary(model)
df
df = mutate(bcmort,
type = ifelse(
((bcmort$cohort == "Nat.ctr.") | (bcmort$cohort == "Hist.ctr.")),
'Control', 'Not Control'))
df
model = glm(bc.deaths ~ type, family = "poisson", data = df)
summary(model)
largework = read.csv("largework.csv")
head(largework)
fullmodel = glm(y ~ ., largework, family = binomial())
nullmodel = glm(y ~ 1, largework, family = binomial())
fullmodel
forwardAIC = step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "forward")
forwardAIC
forwardAIC
forwardAIC
fullmodel = glm(y ~ ., largework, family = binomial())
nullmodel = glm(y ~ 1, largework, family = binomial())
forwardAIC = step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "forward")
backwardAIC = step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "backward")
library(bestglm)
install.packages("bestglm")
install.packages("bestglm")
library(bestglm)
model = glm(y ~ chol + height, largework, family = binomial())
summary(model)
model = glm(y ~ chol + height + chol*height,
largework, family = binomial())
summary(model)
fitf = glm(y ~ chol + height + chol*height,
family = binomial(), data = largework)
fit0 = glm(y ~ chol + height, family = binomial(), data = largework)
lrtest(fitf,fit0)
library(lmtest)
install.packages("lmtest")
library(lmtest)
fitf = glm(y ~ chol + height + chol*height,
family = binomial(), data = largework)
fit0 = glm(y ~ chol + height, family = binomial(), data = largework)
lrtest(fitf,fit0)
forwardAIC
step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "forward")
step(fullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "backward")
residuals(fit0, "pearson")
plot(residuals(fit0, "pearson"))
hist(residuals(fit0, "pearson"))
res = residuals(fit0, "pearson")
hist(res)
res = residuals(fit0, "pearson")
hist(res, main = "Plot of Pearson Residuals")
hist(res, main = "Plot of Pearson Residuals", xlab = "Residual")
which(res > 3)
largework[which(res>3)]
largework[which(res>3),:]
largework[which(res>3),]
dfbeta(fit0)
plot(dfbeta(fit0))
plot(dfbeta(fit0)[,1])
dim(dfbeta(fit0))
dim(res)
plot(dfbeta(fit0)[,2])
plot(dfbeta(fit0)[,3])
plot(dfbeta(fit0)[,1])
dfbetaPlots(fit0)
library(car)
library(iris)
install.packages("car")
install.packages("car")
library(car)
dfbetaPlots(fit0)
plot(dfbeta(fit0)[,1])
plot(dfbeta(fit0)[,2])
plot(dfbeta(fit0)[,3])
plot(dfbeta(fit0)[,1])
plot(dfbeta(fit0)[,2])
plot(dfbeta(fit0)[,1])
largework[which(dfbeta(fit0[,1]) == 0.1)]
dfbeta(fit0)[,1]
round(0.123)
round(0.123, 2)
round(0.123, 1)
round(dfbeta(fit0[,1]),1)
round(dfbeta(fit0)[,1],1)
which(round(dfbeta(fit0)[,1],1) == 0.1)
which(round(dfbeta(fit0)[,2],1) == 0.1)
which(round(dfbeta(fit0)[,3],1) == 0.1)
largework[which(round(dfbeta(fit0)[,1],1) == 0.1)]
largework[which(round(dfbeta(fit0)[,1],1) == 0.1),]
which(round(dfbeta(fitf)[,1],1) == 0.1)
dfbetaPlots(fitf)
which(round(dfbeta(fitf)[,2],1) == 0.1)
which(round(dfbeta(fitf)[,3],1) == 0.1)
which(round(dfbeta(fit0)[,1],1) == 0.1)
which(res>3 | res<-1)
largework[which(res>3) | which(res<-3),]
largework[c(which(res>3), which(res<-3)),]
which(res>3)
res = residuals(fitf, "pearson")
res
which(res>3)
which(res<-3)
largework[which(abs(res)>3),]
largework[which(res>3),]
hist(res, main = "Plot of Pearson's Residuals", xlab = "Residual")
res = residuals(fitf, "pearson")
hist(res, main = "Plot of Pearson's Residuals", xlab = "Residual")
largework[which(abs(res)>3),]
plot(dfbeta(fit0)[,1])
largework[which(round(dfbeta(fit0)[,1],1) == 0.1),]
dfbetaPlots(fit0)
dfbeta(fit0)
?dfbeta
setwd(~/Documents/STA138/byssinosis-logistic-regression)
setwd("~/Documents/STA138/byssinosis-logistic-regression")
df = read.csv("byssinosis.csv")
df
head(df)
my data = dfmodel=glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ Sex+years_employment, family = binomial(),data = mydata)
model
summary(model) #provides the estimates along with std errors for inference
mydata = dfmodel=glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ Sex+years_employment, family = binomial(),data = mydata)
model
summary(model) #provides the estimates along with std errors for inference
mydata = df
model=glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ Sex+years_employment, family = binomial(),data = mydata)
model
summary(model)
mydata$years_employment='<10'
mydata[(mydata$Employment=='>=20')|(mydata$Employment=='10-19'),]$years_employment='>=10'
mydata
head(mydata)
cbind(Byssinosis,Non.Byssinosis)
model=glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ Sex+years_employment, family = binomial(),data = mydata)
model
summary(model)
fullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
summary(fullmodel)
knitr::opts_chunk$set(echo = FALSE, include = TRUE)
fullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
nullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ 1,
family = binomial(), data = df)
summary(fullmodel)
summary(model)
model = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
summary(model)
?glm
head(df)
df
model = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
summary(model)
e(-1.3758)
exp(-1.3758)
model = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ (.)^2,
family = binomial(), data = df)
summary(model)
model = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
summary(model)
model
model = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ (.)^2,
family = binomial(), data = df)
summary(model)
model
residuals(model)
forwardAIC = step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "forward")
forwardAIC
backwardAIC = step(fullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "backward")
backwardAIC
# Problem II
fullmodel = glm(y ~ ., largework, family = binomial())
nullmodel = glm(y ~ 1, largework, family = binomial())
knitr::opts_chunk$set(echo = FALSE, include = FALSE)
# Model selection
fullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
nullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ 1,
family = binomial(), data = df)
# Forward AIC
forwardAIC = step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "forward")
forwardAIC
backwardAIC = step(fullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "backward")
backwardAIC
forwardAIC
bidirectAIC = step(fullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "both")
bidirectAIC
bestsubsetBIC = bestglm(Xy = largework, family = binomial(),
IC = "BIC", method = "exhaustive")
bestsubsetBIC
bestsubsetBIC = bestglm(Xy = df, family = binomial(),
IC = "BIC", method = "exhaustive")
head(df)
df$Byssinosis[1]
c(df$Byssinosis[1],df$Non.Byssinosis[1])
fullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ (.)^2,
family = binomial(), data = df)
nullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ 1,
family = binomial(), data = df)
forwardAIC = step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "forward")
forwardAIC
nullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ 1,
family = binomial(), data = df)
# Model selection
fullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
forwardAIC = step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "forward")
forwardAIC
# Forward AIC
forwardAIC = step(nullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "forward")
# Backward AIC
backwardAIC = step(fullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "backward")
# Bidirectional AIC
bidirectAIC = step(fullmodel,
scope = list(lower = nullmodel,
upper = fullmodel),
direction = "both")
forwardAIC
backwardAIC
bidirectAIC
fullmodel
fullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ (.)^2,
family = binomial(), data = df)
nullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
fullmodel
fullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ (.)^2,
family = binomial(), data = df)
nullmodel = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
nullmodel
anova(fullmodel, nullmodel, test="LRT")
fitf = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ (.)^2,
family = binomial(), data = df)
fit0 = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ .,
family = binomial(), data = df)
lrtest(fitf,fit0)
anova(fitf, fit0, test="LRT")
res = residuals(fit0, "pearson")
hist(res, main = "Plot of Pearson's Residuals", xlab = "Residual")
df[which(abs(res)>3),]
res
fit0
head(df)
plot(res)
dfbetaPlots(fit0)
knitr::opts_chunk$set(echo = FALSE, include = TRUE)
# LR test for interactions
fitf = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~
(Employemnt + Smoking + Workspace)^2,
family = binomial(), data = df)
fitf = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~
(Employment + Smoking + Workspace)^2,
family = binomial(), data = df)
fit0 = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~
Employment + Smoking + Workspace,
family = binomial(), data = df)
lrtest(fitf,fit0)
res = residuals(fit0, "pearson")
hist(res, main = "Plot of Pearson's Residuals", xlab = "Residual")
dfbetaPlots(fit0)
plot(predict(fit0),dffits(fit0))
dffits(fit0)
plot(dffits)
plot(predict(fit0),dffits(fit0))
predict(fit0)
plot(predict(fit0),dffits(fit0))
dffits(fit0)
length(predict(fit0))
length(dffits(fit0))
dfbeta(fit0)
shape(dfbeta(fit0))
dim(dfbeta(fit0))
dim(dffits(model0))
dim(dffits(fit0))
plot(dffits(fit0))
df[which(abs(dffits(fit0)) > 1)]
df[which(abs(dffits(fit0)) > 1),]
model = glm(formula = cbind(Byssinosis,Non.Byssinosis) ~ (.)^2,
family = binomial(), data = df)
summary(model)
